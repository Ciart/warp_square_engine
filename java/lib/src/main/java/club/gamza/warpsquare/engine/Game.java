// Automatically generated by flapigen
package club.gamza.warpsquare.engine;


public final class Game {

    public Game() {
        mNativeObj = init();
    }
    private static native long init();

    public final Square [] getAttackSquares(BitBoard square) {
        long a0 = square.mNativeObj;
        square.mNativeObj = 0;

        Square [] ret = do_getAttackSquares(mNativeObj, a0);

        JNIReachabilityFence.reachabilityFence1(square);

        return ret;
    }
    private static native Square [] do_getAttackSquares(long self, long square);

    public final boolean legalMove(PieceMove a0) {
        long a00 = a0.mNativeObj;
        a0.mNativeObj = 0;

        boolean ret = do_legalMove(mNativeObj, a00);

        JNIReachabilityFence.reachabilityFence1(a0);

        return ret;
    }
    private static native boolean do_legalMove(long self, long a0);

    public final void pushMove(PieceMove a0) throws Exception {
        long a00 = a0.mNativeObj;
        a0.mNativeObj = 0;

        do_pushMove(mNativeObj, a00);

        JNIReachabilityFence.reachabilityFence1(a0);
    }
    private static native void do_pushMove(long self, long a0) throws Exception;

    public final PieceMove popMove() throws Exception {
        long ret = do_popMove(mNativeObj);
        PieceMove convRet = new PieceMove(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_popMove(long self) throws Exception;

    public final void print() {
        do_print(mNativeObj);
    }
    private static native void do_print(long self);

    public final Color getTurn() {
        int ret = do_getTurn(mNativeObj);
        Color convRet = Color.fromInt(ret);

        return convRet;
    }
    private static native int do_getTurn(long self);

    public final Piece [] getPieces() {
        Piece [] ret = do_getPieces(mNativeObj);

        return ret;
    }
    private static native Piece [] do_getPieces(long self);

    public final Piece [] getCapturedPieces() {
        Piece [] ret = do_getCapturedPieces(mNativeObj);

        return ret;
    }
    private static native Piece [] do_getCapturedPieces(long self);

    public synchronized void delete() {
        if (mNativeObj != 0) {
            do_delete(mNativeObj);
            mNativeObj = 0;
       }
    }
    @Override
    protected void finalize() throws Throwable {
        try {
            delete();
        }
        finally {
             super.finalize();
        }
    }
    private static native void do_delete(long me);
    /*package*/ Game(InternalPointerMarker marker, long ptr) {
        assert marker == InternalPointerMarker.RAW_PTR;
        this.mNativeObj = ptr;
    }
    /*package*/ long mNativeObj;

    static {
        try {
            NativeUtils.loadLibraryFromJar();
        } catch (java.io.IOException e) {
            e.printStackTrace();
        }
    }
}