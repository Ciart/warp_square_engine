// Automatically generated by flapigen
package club.gamza.warpsquare.engine;


public final class BoardMove {

    public BoardMove(Level source, Level destination, PieceType promotion) {
        int a0 = source.getValue();        int a1 = destination.getValue();
        int a2 = (promotion != null) ? promotion.getValue() : -1;

        mNativeObj = init(a0, a1, a2);
        JNIReachabilityFence.reachabilityFence3(source, destination, promotion);
    }
    private static native long init(int source, int destination, int promotion);

    public final Level getSource() {
        int ret = do_getSource(mNativeObj);
        Level convRet = Level.fromInt(ret);

        return convRet;
    }
    private static native int do_getSource(long self);

    public final Level getDestination() {
        int ret = do_getDestination(mNativeObj);
        Level convRet = Level.fromInt(ret);

        return convRet;
    }
    private static native int do_getDestination(long self);

    public final java.util.Optional<PieceType> getPromotion() {
        int ret = do_getPromotion(mNativeObj);
        java.util.Optional<PieceType> convRet;
        if (ret != -1) {
            convRet = java.util.Optional.of(PieceType.fromInt(ret));
        } else {
            convRet = java.util.Optional.empty();
        }

        return convRet;
    }
    private static native int do_getPromotion(long self);

    public synchronized void delete() {
        if (mNativeObj != 0) {
            do_delete(mNativeObj);
            mNativeObj = 0;
       }
    }
    @Override
    protected void finalize() throws Throwable {
        try {
            delete();
        }
        finally {
             super.finalize();
        }
    }
    private static native void do_delete(long me);
    /*package*/ BoardMove(InternalPointerMarker marker, long ptr) {
        assert marker == InternalPointerMarker.RAW_PTR;
        this.mNativeObj = ptr;
    }
    /*package*/ long mNativeObj;

    static {
        try {
            NativeUtils.loadLibraryFromJar();
        } catch (java.io.IOException e) {
            e.printStackTrace();
        }
    }
}