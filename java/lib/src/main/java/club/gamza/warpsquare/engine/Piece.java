// Automatically generated by flapigen
package club.gamza.warpsquare.engine;


public final class Piece {

    private Piece() {}

    public final PieceType getPieceType() {
        int ret = do_getPieceType(mNativeObj);
        PieceType convRet = PieceType.fromInt(ret);

        return convRet;
    }
    private static native int do_getPieceType(long self);

    public final Color getColor() {
        int ret = do_getColor(mNativeObj);
        Color convRet = Color.fromInt(ret);

        return convRet;
    }
    private static native int do_getColor(long self);

    public final BitBoard getPosition() {
        long ret = do_getPosition(mNativeObj);
        BitBoard convRet = new BitBoard(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_getPosition(long self);

    public final Square getSquare() {
        long ret = do_getSquare(mNativeObj);
        Square convRet = new Square(InternalPointerMarker.RAW_PTR, ret);

        return convRet;
    }
    private static native long do_getSquare(long self);

    public final String getChar() {
        String ret = do_getChar(mNativeObj);

        return ret;
    }
    private static native String do_getChar(long self);

    public synchronized void delete() {
        if (mNativeObj != 0) {
            do_delete(mNativeObj);
            mNativeObj = 0;
       }
    }
    @Override
    protected void finalize() throws Throwable {
        try {
            delete();
        }
        finally {
             super.finalize();
        }
    }
    private static native void do_delete(long me);
    /*package*/ Piece(InternalPointerMarker marker, long ptr) {
        assert marker == InternalPointerMarker.RAW_PTR;
        this.mNativeObj = ptr;
    }
    /*package*/ long mNativeObj;

    static {
        try {
            NativeUtils.loadLibraryFromJar();
        } catch (java.io.IOException e) {
            e.printStackTrace();
        }
    }
}